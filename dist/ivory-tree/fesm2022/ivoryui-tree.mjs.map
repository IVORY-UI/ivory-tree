{"version":3,"file":"ivoryui-tree.mjs","sources":["../../../projects/ivory-tree/src/lib/providers/uniquegen.service.ts","../../../projects/ivory-tree/src/lib/ivory-recursivenode/ivory-recursivenode.component.ts","../../../projects/ivory-tree/src/lib/ivory-recursivenode/ivory-recursivenode.component.html","../../../projects/ivory-tree/src/lib/ivory-treenode/ivory-treenode.component.ts","../../../projects/ivory-tree/src/lib/ivory-treenode/ivory-treenode.component.html","../../../projects/ivory-tree/src/lib/ivory-tree.component.ts","../../../projects/ivory-tree/src/lib/ivory-tree.component.html","../../../projects/ivory-tree/src/lib/ivory-tree.module.ts","../../../projects/ivory-tree/src/public-api.ts","../../../projects/ivory-tree/src/ivoryui-tree.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UniqueIdGeneratorService {\n\n  getUniqueId() {\n    const randomness = Math.random().toString(36).slice(2, 11);\n    return randomness;\n  }\n\n}\n","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\n\nimport { UniqueIdGeneratorService } from '../providers/uniquegen.service';\n\n@Component({\n  selector: 'ivory-recursivenode',\n  templateUrl: './ivory-recursivenode.component.html',\n  styleUrls: ['../styles/ivory-node.scss', './ivory-recursivenode.component.scss']\n})\nexport class IvoryRecursivenodeComponent implements OnInit, OnDestroy {\n\n  public _node: any;\n  public _title: any;\n  public _uniqueId: any;\n  public _expanded: boolean = false;\n\n  @Input() \n  set node(value: any) {\n    this._node = value;\n  }\n  get node() {\n    return this._node;\n  }\n\n  @Input()\n  set nodeTitle(value: any) {\n    this._title = value;\n  }\n  get nodeTitle() {\n    return this._title;\n  }\n\n  @Input() nodeSelectable: boolean = false;\n\n  @Input() \n  set nodeExpanded(value: boolean) {\n    this._expanded = value;\n  }\n\n  @Output() whenNodeSelect = new EventEmitter();\n  public emitNodeSelection(status: any): void {\n    this.whenNodeSelect.emit(this._node);\n  }\n\n  constructor(\n    public uniqueIdService: UniqueIdGeneratorService\n  ) {\n    this._uniqueId = this.uniqueIdService.getUniqueId();\n  }\n\n  ngOnInit() {\n    \n  }\n\n  nodeSelectionChange(event: any) {\n    event.stopPropagation();\n    this._node.isSelected = event.target.checked;\n    if (this._node.children && this._node.children.length>0) {\n      this.impactChildrenSelection();\n    }\n    this.emitNodeSelection(event.target.checked);\n    \n  }\n\n  impactChildrenSelection() {\n    for (let i=0; i<this._node.children.length; i++) {\n      this._node.children[i]['isSelected'] = this._node.isSelected;\n    }\n  }\n\n  ngOnDestroy(): void {\n    \n  }\n\n}\n","<div class=\"ivory-node\">\n  <div class=\"ivory-node-content\">\n    <div class=\"ivory-node-expand\">\n      @if (node.children && node.children.length>0) {\n        <button (click)=\"_expanded=!_expanded\">\n          @if (!_expanded) {\n            <div class=\"ivory-icon-collapse\"></div>\n          }\n          @else {\n            <div class=\"ivory-icon-expand\"></div>\n          }\n        </button>\n      }\n    </div>\n    <div class=\"ivory-node-title\">\n      @if (nodeSelectable) {\n        <input\n          type=\"checkbox\"\n          id=\"{{_uniqueId}}\"\n          class=\"node-checkbox\"\n          [name]=\"node.name\"\n          (change)=\"nodeSelectionChange($event)\"\n          [(ngModel)]=\"node.isSelected\"\n        />\n        <label for=\"{{_uniqueId}}\">\n          {{ node.name }}\n        </label>\n      }\n      @else {\n        <span>\n          {{ node.name }}\n        </span>\n      }\n    </div>\n  </div>\n  \n  @if (_expanded) {\n    <div class=\"ivory-node-children\">\n      <ng-content></ng-content>\n    </div>\n  }\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ivory-treenode',\n  templateUrl: './ivory-treenode.component.html',\n  styleUrls: ['../styles/ivory-node.scss']\n})\nexport class IvoryTreenodeComponent {\n\n  public _node: any;\n  public _isExpanded:boolean = false;\n\n  @Input() \n  set node(value: any) {\n    this._node = value;\n  }\n  get node() {\n    return this._node;\n  }\n\n @Input() \n set nodeExpanded(value: any) {\n  this._isExpanded = value;\n }\n\n  @Input() nodeHasChildren: boolean = false;\n\n  @Input() isNodeDisabled: boolean = false;\n\n  @Output() whenNodeSelect = new EventEmitter();\n\n  @Output() whenNodeExpand = new EventEmitter();\n\n\n}\n","<div class=\"ivory-node\">\n  <div class=\"ivory-node-content\">\n    <div class=\"ivory-node-expand\">\n      @if (nodeHasChildren) {\n        <button (click)=\"_isExpanded=!_isExpanded\">\n          @if (!_isExpanded) {\n            <div class=\"ivory-icon-collapse\"></div>\n          }\n          @else {\n            <div class=\"ivory-icon-expand\"></div>\n          }\n        </button>\n      }\n    </div>\n    <div class=\"ivory-node-title\">\n      <ng-content select=\"[title]\"></ng-content>\n    </div>\n  </div>\n  @if (nodeHasChildren && _isExpanded) {\n    <div class=\"ivory-node-children\">\n      <ng-content></ng-content>\n    </div>\n  }\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\n\n@Component({\n  selector: 'ivory-tree',\n  templateUrl: './ivory-tree.component.html',\n  styles: `\n    .ivory-tree-container {\n      display: flex;\n      flex-direction: column;\n    }\n  `\n})\nexport class IvoryTreeComponent implements OnInit, OnDestroy {\n\n  @Input() treeRecursive: boolean = false;\n\n  @Input() treeData: any;\n\n  @Input() treeNodeSelection: boolean = false;\n\n  @Input() treeExpandByDefault: boolean = false;\n\n  @Input() nodeTitleParam: string = '';\n\n  constructor(\n  ) {}\n\n  ngOnInit(): void {\n    \n  }\n\n  /**\n   * Invokes when any node checkbox selected/unselected and maintains the pile of selected nodes.\n   * @param event Change event\n   */\n  nodeSelectionChange(event: any) {\n    console.log('Selected node -> ', event);\n    // for (const item of this.childTreeNode.toArray()) {\n    //   // Close action menu if already open.\n    //   item._isActionMenuOpen = false;\n    //   // Falsify isSelected attribute for selected folder node. \n    //   if (this._selectedStack.length>0 && this._selectedStack[0].folderId === item._nodeData['folderId']) {\n    //     item._nodeData['isSelected'] = false;\n    //   }\n    // }\n    // if (this.updateStack(event)) {\n    //   // Emits the list of selected folders to parent component\n    //   this.treeItemSelected.emit(this._selectedStack);\n    //   this._isNodeActionOpen = false;\n    // }\n  }\n\n  /**\n   * Invokes when any node checked/unchecked. Convenience method to add/remove the node from the selected\n   * folders stack.\n   * @param source Selected folder node\n   */\n  updateStack(source: any) {\n    // if (!this.util.isContains(this._selectedStack, source, 'folderId')) {\n    //   this._selectedStack = [source];\n    //   return true;\n    // }\n  }\n\n\n  ngOnDestroy(): void {\n    \n  }\n\n}\n","<div class=\"ivory-tree-container\">\n  @if (treeRecursive) {\n    <!-- If the tree is a recursive -->\n    @if (treeData) {\n      <ng-container *ngTemplateOutlet=\"ivoryRecursiveTemplate; context:{ list: treeData }\">\n      </ng-container>\n    }\n    <ng-template #ivoryRecursiveTemplate let-list=\"list\">\n      @for (item of list; track $index) {\n        <ivory-recursivenode\n          [node]=\"item\"\n          [nodeTitle]=\"item[nodeTitleParam]\"\n          [nodeSelectable]=\"treeNodeSelection\"\n          [nodeExpanded]=\"treeExpandByDefault\"\n          (whenNodeSelect)=\"nodeSelectionChange($event)\"\n        >\n        @if (item && item.children && item.children.length > 0) {\n          <ng-container *ngTemplateOutlet=\"ivoryRecursiveTemplate; context:{ list: item.children }\">\n          </ng-container>\n        }\n        </ivory-recursivenode>\n      }\n    </ng-template>\n  }\n  @else {\n    <!-- If the tree is a non-recursive -->\n    <ng-content></ng-content>\n  }  \n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser'\nimport { FormsModule } from '@angular/forms';\n\n/* Components */\nimport { IvoryTreeComponent } from './ivory-tree.component';\nimport { IvoryTreenodeComponent } from './ivory-treenode/ivory-treenode.component';\nimport { IvoryRecursivenodeComponent } from './ivory-recursivenode/ivory-recursivenode.component';\n\n@NgModule({\n  declarations: [\n    IvoryTreeComponent,\n    IvoryTreenodeComponent,\n    IvoryRecursivenodeComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  exports: [\n    IvoryTreeComponent,\n    IvoryTreenodeComponent,\n    IvoryRecursivenodeComponent\n  ]\n})\nexport class IvoryTreeModule { }\n","/*\n * Public API Surface of ivory-tree\n */\n\nexport * from './lib/ivory-recursivenode/ivory-recursivenode.component';\nexport * from './lib/ivory-treenode/ivory-treenode.component';\nexport * from './lib/ivory-tree.component';\nexport * from './lib/ivory-tree.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.UniqueIdGeneratorService","i2.IvoryRecursivenodeComponent"],"mappings":"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"}